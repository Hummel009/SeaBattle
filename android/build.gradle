android {
	namespace "com.github.hummel.sb"
	compileSdkVersion 34

	packagingOptions {
		exclude "META-INF/robovm/ios/robovm.xml"
	}

	defaultConfig {
		applicationId "com.github.hummel.sb"
		minSdkVersion 19
		targetSdkVersion 34
		versionCode 1
		versionName "1.0"
	}
}
dependencies {
	api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
}

tasks.register("copyAndroidNatives") {
	doFirst {
		file("src/main/jniLibs/armeabi-v7a/").mkdirs()
		file("src/main/jniLibs/arm64-v8a/").mkdirs()
		file("src/main/jniLibs/x86_64/").mkdirs()
		file("src/main/jniLibs/x86/").mkdirs()

		configurations.natives.copy().files.each { jar ->
			def outputDir = null
			if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/jniLibs/arm64-v8a")
			if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
			if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/jniLibs/x86_64")
			if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
			if (outputDir != null) {
				copy {
					from zipTree(jar)
					into outputDir
					include "*.so"
				}
			}
		}
	}
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask -> packageTask.dependsOn "copyAndroidNatives"
}

tasks.register("run", Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr -> properties.load(instr)
		}
		def sdkDir = properties.getProperty("sdk.dir")
		if (sdkDir) {
			path = sdkDir
		} else {
			path = "$System.env.ANDROID_HOME"
		}
	} else {
		path = "$System.env.ANDROID_HOME"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", "shell", "am", "start", "-n", "com.github.hummel.sb/com.github.hummel.sb.AndroidLauncher"
}